<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects | Yuantian Ding</title><link>https://dnailz.github.io/homepage-academic/project/</link><atom:link href="https://dnailz.github.io/homepage-academic/project/index.xml" rel="self" type="application/rss+xml"/><description>Projects</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 27 Apr 2016 00:00:00 +0000</lastBuildDate><image><url>https://dnailz.github.io/homepage-academic/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url><title>Projects</title><link>https://dnailz.github.io/homepage-academic/project/</link></image><item><title>JFass - A New Serverless Platform with Customized JVM Runtime</title><link>https://dnailz.github.io/homepage-academic/project/jit/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://dnailz.github.io/homepage-academic/project/jit/</guid><description>&lt;p>Faas (Function as a service) is one form of serverless computing where users only need to deploy function on the cloud and the cloud service vendor will handle all the hardware resources the function needs. The vendor will provide runtimes for these functions which are driven by events. However, Faas is tailored for short-lived functions which makes traditional runtime optimizations such as JIT compilation fail to enhance performance. We want to design a new framework to bridge the gap between modern language runtime and serverless platforms.&lt;/p>
&lt;p>In this work, we aim at building a new serverless platform tailored for JVM runtime with profile information sharing and native code sharing across nodes. We also hope to use hardware tracing technology to help reduce profiling overhead from interpreter stage.&lt;/p>
&lt;p>Working in progress: I&amp;rsquo;m trying to implement this on HotspotVM. &lt;a href="https://dnailz.github.io/homepage-academic/homepage-academic/uploads/draft.pdf">Draft Paper&lt;/a> &lt;a href="https://dnailz.github.io/homepage-academic/homepage-academic/uploads/JITRelocation.pdf">Implementation Report&lt;/a>&lt;/p></description></item><item><title>Order Scheduling in Disk-based Graph Processing</title><link>https://dnailz.github.io/homepage-academic/project/graph/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://dnailz.github.io/homepage-academic/project/graph/</guid><description>&lt;p>Graph processing is a common task that has been researched for many years. You can model many real-world structures in graphs: social networks, web documents â€¦ In most of the time, graphs are stored as sparse matrices. But in many real-world problems, sparse matrices are sometimes too large to fit into memory. We may use distributed strategy to resolve this problem. However, recent research has shown that the single machine disk-based method outperforms many distributed ones in many cases. But these disk-based graph processing systems still have a lot of IO overhead. To address this problem, we proposed a new graph task ordering algorithm that can reduce almost 50% of data loading from the disk.&lt;/p>
&lt;p>The process of this algorithm is shown in this &lt;a href="https://dnailz.github.io/homepage-academic/homepage-academic/uploads/Ordering.pdf">slides&lt;/a>.&lt;/p></description></item></channel></rss>