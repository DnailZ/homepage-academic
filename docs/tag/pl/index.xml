<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PL | Yuantian Ding</title>
    <link>https://example.com/tag/pl/</link>
      <atom:link href="https://example.com/tag/pl/index.xml" rel="self" type="application/rss+xml" />
    <description>PL</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 27 Apr 2016 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>PL</title>
      <link>https://example.com/tag/pl/</link>
    </image>
    
    <item>
      <title>Leverage JIT Code and Profile Sharing for serverless application</title>
      <link>https://example.com/project/jit/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://example.com/project/jit/</guid>
      <description>&lt;p&gt;The serverless computing model leverages high-level languages, such as JavaScript and Java, to raise the level of abstraction for cloud programming. However, todayâ€™s design of serverless computing platforms based on stateless short-lived functions leads to missed opportunities for modern runtimes to optimize serverless functions through techniques such as JIT compilation and code profiling.&lt;/p&gt;
&lt;p&gt;We found that modern serverless platforms can not fully leverage language runtime optimizations: Modern serverless platforms can not share JIT-compiled code between different instances. From the picture, we noticed original serverless function can be accelerated by JIT code and profile sharing.&lt;/p&gt;
&lt;p&gt;Working in progress: I&amp;rsquo;m trying to implement this on HotspotVM. &lt;a href=&#34;https://example.com/uploads/JITRelocation.pdf&#34;&gt;Implementation Report&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Processing Order Scheduling in Disk-based Graph Processing</title>
      <link>https://example.com/project/graph/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://example.com/project/graph/</guid>
      <description>&lt;p&gt;Graph processing is a common task that has be researched for many years. You can model many real-world structure in graphs: social network, web documents &amp;hellip; In most of times, graphs are stored as sparse matrices. But in many real world problems, sparse matrices are sometimes too large to fit into memory. We may use distributed strategy to resolve this problem. However, recently research have shown that single machine disk-based method outperform many distributed ones in many cases. But these disk-based graph processing system still have a lots of IO overhead. To address this problem, we proposed a new graph task ordering algorithm which can reduce almost 50% data loading from disk.&lt;/p&gt;
&lt;p&gt;The process of this algorithm is shown in this &lt;a href=&#34;https://example.com/uploads/Ordering.pdf&#34;&gt;slides&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
